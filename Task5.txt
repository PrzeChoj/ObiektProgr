For this part you’re required to make your application run in a loop reading and processing commands
from standard input. The starting data for your application (which will be used to execute commands
on) is the objects that you have created during previous parts. Since the task builds on top of the
preceding ones you are required to maintain the previously written code and make it work with the
new functionalities - for instance the collection should still be able to store both representations
of the objects.

You are free to implement these commands using any pattern you might see fit. Preferably your code
handling commands logic should be independent of the class chosen by the user. In further parts you
might be required to add new commands with possibly very different functionalities, so make sure to
take that into account, when designing the structure of your code. Switches and IF chains are
generally not a correct way to go.

IMPORTANT: Implemented commands must interact with previously created data and use implemented
collections!

These are the commands that you are required to implement during this task:

1. list - prints all objects of a particular type

The format of the command should be as follows:

    list <name_of_the_class>

The command should print to the console all of the objects of this class where printing an object
means listing all of its non reference fields (make sure that the format is readable and not just
blatantly printing the values of all of the fields).

In the future there might be more types so make sure that you account for that.

Example usages:
    list game
    list animal

2. find - prints objects matching certain conditions

Find works similarly to ‘list’, but you can also add optional parameters for filtering results. Only
results that fulfil all of the requirements are to be printed.

The format of the command should be as follows:

    find <name_of_the_class> [<requirement> …]

where requirements (space separated list of requirements) specify acceptable values of atomic non
reference fields. They follow format:

    <name_of_field>=|<|><value>

Where “=|<|>” means any strong comparison operator. For numerical fields natural comparison should
be used. Strings should use a lexicographic order. For other types only “=” is allowed. If a value
were to contain spaces it should be placed inside quotation marks.

You should check that the name of the field is correct for the specified class and that the value
can be parsed to the correct type. If there are any errors in the command they should be reported
instead of printing the result of finding.

Usage of Reflection is forbidden.

Everything that was said about “list” is also applicable to “find”.

Example usage:
    find game name=”Elden Ring”

3. exit - gracefully finish execution of your application

HINT 1: You can use a dictionary keyed by command name that stores command logic. Think what should
hold this logic. A class instance, event, function or something else? Should it accept parsed input
tokens or raw string? What if your command want’s to ask the user for additional inputs? (This is
not the only way to do this, you can try to think of other patterns to use).

HINT 2: For each class you will need to know fields that can be used for filtering along with their
type. Should this be handled as an internal class logic or some common logic, using data obtained
from class?



WZORZEC command oraz interpreter
